diff --git a/thirdparty/misc/mikktspace.c b/thirdparty/misc/mikktspace.c
index 0342ae0146..6dd078a588 100644
--- a/thirdparty/misc/mikktspace.c
+++ b/thirdparty/misc/mikktspace.c
@@ -30,6 +30,12 @@
 
 #include "mikktspace.h"
 
+#ifdef REAL_T_IS_DOUBLE
+typedef double real_t;
+#else
+typedef float real_t;
+#endif
+
 #define TFALSE		0
 #define TTRUE		1
 
@@ -883,30 +889,33 @@ static int GenerateInitialVerticesIndexList(STriInfo pTriInfos[], int piTriList_
 static SVec3 GetPosition(const SMikkTSpaceContext * pContext, const int index)
 {
 	int iF, iI;
-	SVec3 res; float pos[3];
+	SVec3 res;
+	float *p;
 	IndexToData(&iF, &iI, index);
-	pContext->m_pInterface->m_getPosition(pContext, pos, iF, iI);
-	res.x=pos[0]; res.y=pos[1]; res.z=pos[2];
+	p = (real_t*)((char*)pContext->m_FastPosition + pContext->m_FastPositionIndex[iF * 3 + iI] * pContext->m_FastPositionStride);
+	res.x = (float)p[0]; res.y = (float)p[1]; res.z = (float)p[2];
 	return res;
 }
 
 static SVec3 GetNormal(const SMikkTSpaceContext * pContext, const int index)
 {
 	int iF, iI;
-	SVec3 res; float norm[3];
+	SVec3 res;
+	float *p;
 	IndexToData(&iF, &iI, index);
-	pContext->m_pInterface->m_getNormal(pContext, norm, iF, iI);
-	res.x=norm[0]; res.y=norm[1]; res.z=norm[2];
+	p = (real_t*)((char*)pContext->m_FastNormal + pContext->m_FastNormalIndex[iF * 3 + iI] * pContext->m_FastNormalStride);
+	res.x = p[0]; res.y = p[1]; res.z = p[2];
 	return res;
 }
 
 static SVec3 GetTexCoord(const SMikkTSpaceContext * pContext, const int index)
 {
 	int iF, iI;
-	SVec3 res; float texc[2];
+	SVec3 res;
+	float *p;
 	IndexToData(&iF, &iI, index);
-	pContext->m_pInterface->m_getTexCoord(pContext, texc, iF, iI);
-	res.x=texc[0]; res.y=texc[1]; res.z=1.0f;
+	p = (real_t*)((char*)pContext->m_FastUV + pContext->m_FastUVIndex[iF * 2 + iI] * pContext->m_FastUVStride);
+	res.x = p[0]; res.y = p[1]; res.z = 1.0f;
 	return res;
 }
 
diff --git a/thirdparty/misc/mikktspace.h b/thirdparty/misc/mikktspace.h
index 52c44a713c..855025c784 100644
--- a/thirdparty/misc/mikktspace.h
+++ b/thirdparty/misc/mikktspace.h
@@ -107,6 +107,19 @@ struct SMikkTSpaceContext
 {
 	SMikkTSpaceInterface * m_pInterface;	// initialized with callback functions
 	void * m_pUserData;						// pointer to client side mesh data etc. (passed as the first parameter with every interface call)
+
+	// Optimized the vertex representation.
+	const void *m_FastPosition;
+	size_t m_FastPositionStride;
+	const int *m_FastPositionIndex;
+
+	const void *m_FastNormal;
+	size_t m_FastNormalStride;
+	const int *m_FastNormalIndex;
+
+	const void *m_FastUV;
+	size_t m_FastUVStride;
+	const int *m_FastUVIndex;
 };
 
 // these are both thread safe!
